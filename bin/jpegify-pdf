#!/usr/bin/env python

import os
from argparse import (
    ArgumentParser,
    BooleanOptionalAction,
    RawDescriptionHelpFormatter,
)
from io import BytesIO
from pathlib import Path

from pikepdf import Page, Pdf, PdfImage, Name

__doc__ = """\
Shrink a PDF by converting flate-encoded images to JPEGs.

Big Sur Safari’s PDF export generates *enormous* files because it is
embedding zips of raw image data. This program fixes that by re-encoding
those images as JPEGs, resulting in about 1/10th the file size.
"""


def main():
    parser = ArgumentParser(
        description=__doc__, formatter_class=RawDescriptionHelpFormatter
    )
    parser.add_argument("file")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("out_file", nargs="?")
    group.add_argument(
        "-i", "--inplace", action="store_true", help="overwrite input file"
    )
    group.add_argument(
        "--dry-run",
        action="store_true",
        help="show what would happen but don’t write any PDFs (implies --verbose)",
    )
    parser.add_argument(
        "--extract-images-to",
        type=str,
        metavar="DIR",
        help="Extract before and after images to this directory for comparison",
    )
    parser.add_argument("-v", "--verbose", action=BooleanOptionalAction)
    parser.add_argument("-m", "--copy-mtime", action='store_true')
    args = parser.parse_args()
    if args.dry_run:
        args.verbose = True

    kwargs = {}
    if args.inplace:
        kwargs["allow_overwriting_input"] = True
    pdf = Pdf.open(args.file, **kwargs)
    stat = os.stat(args.file)

    if args.extract_images_to:
        out_dir = Path(args.extract_images_to)
        out_dir.mkdir(exist_ok=True)

    total_image_bytes_before = 0
    total_image_bytes_after = 0

    for i, page in enumerate(pdf.pages):
        if args.verbose:
            print(f"Page {i}")

        for j, (name, raw_image) in enumerate(page.images.items()):
            w = raw_image.stream_dict.Width
            h = raw_image.stream_dict.Height
            filter = raw_image.stream_dict.Filter
            size = raw_image.stream_dict.Length

            total_image_bytes_before += size

            image = PdfImage(raw_image)

            if args.verbose:
                print(f"{name} {w}x{h} {filter} {size:,}B {image.colorspace}")

            if args.extract_images_to:
                image.extract_to(
                    fileprefix=f"{out_dir.name}/page-{i:03}-img{j:03}"
                )

            pil_image = image.as_pil_image()
            if pil_image.mode == "P":
                if args.verbose:
                    print(
                        "    mode P (color palette) images cannot be saved as JPEGs"
                    )
            elif pil_image.mode == "RGBA":
                if args.verbose:
                    print(
                        "    mode RGBA (transparency) images cannot be saved as JPEGs"
                    )
            else:
                buf = BytesIO()
                pil_image.save(buf, format="JPEG")

                if args.extract_images_to:
                    with open(
                        out_dir / f"page-{i:03}-img{j:03}-new.jpg", "wb"
                    ) as f:
                        f.write(buf.getvalue())

                if args.verbose:
                    print(f"    JPEG is {len(buf.getvalue()):,}B")

                if len(buf.getvalue()) < size:
                    raw_image.write(buf.getvalue(), filter=Name("/DCTDecode"))
                    total_image_bytes_after += len(buf.getvalue())
                else:
                    total_image_bytes_after += size
                    if args.verbose:
                        print("    no file size reduction, skipping")

    if args.verbose:
        reduction = total_image_bytes_after / total_image_bytes_before * 100
        print(
            f"total size: {total_image_bytes_before:,} → {total_image_bytes_after:,}, {reduction:.0f}%"
        )

    if not args.dry_run:
        out_file = args.out_file
        if out_file is None:
            if args.inplace:
                out_file = args.file
            else:
                raise Exception("no out_file and --inplace not specified")
        pdf.save(out_file)

        if args.copy_mtime:
            os.utime(out_file, (stat.st_atime, stat.st_mtime))


if __name__ == "__main__":
    main()
