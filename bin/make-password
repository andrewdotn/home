#!/usr/bin/env python2.7
# coding: UTF-8

__doc__ = """
Generate random passwords using the specified template, and print them to
stdout.

TEMPLATE is a sequence of characters, each of which is replaced with a
corresponding randomly chosen string:

 W - a word
 D - a digit: 0-9
 P - a punctuation mark: (!"#$%&'*+,-./:;<=>?@[\]^_`{|}~)
 L - a letter: a-zA-Z
 l - a lowercase letter: a-z
 N - a non-letter: digit or punctuation
 c - a letter or digit: a-zA-Z0-9
 C - any character: letter, digit, or punctuation

For example the template “DWP” produces passwords with a digit followed
by a word followed by a punctuation mark, e.g. “3globetrot#”.
"""

import argparse
import gzip
import math
import os
import random
import re
import string
import sys

TEMPLATE_METACHARS = {
    'D': string.digits,
    'P': string.punctuation,
    'L': string.letters,
    'l': string.lowercase,
    'N': string.digits + string.punctuation,
    'c': string.letters + string.digits,
    'C': string.letters + string.digits + string.punctuation,
}

inited = False

def init(word_list=None):
    global inited, sys_random, TEMPLATE_METACHARS

    if inited:
        return

    # To use a custom wordlist, put a “words.gz” in the same directory as
    # this file.
    if word_list is None:
        wordlist_name = os.path.join(os.path.dirname(__file__), 'words.gz')
        if os.path.exists(wordlist_name):
            wordlist = gzip.open(wordlist_name)
        else:
            wordlist = open('/usr/share/dict/words', 'r')
    else:
        if word_list.endswith('.gz'):
            wordlist = gzip.open(wordlist_name)
        else:
            wordlist = open(word_list, 'r')
    try:
        TEMPLATE_METACHARS['W']  = wordlist.read().split('\n')
    finally:
        wordlist.close()

    sys_random = random.SystemRandom()

    inited = True


class PasswordGenerator(object):

    def __init__(self, args):
        super(PasswordGenerator, self)

        init(word_list=args.word_list)
        if args.template is None:
            self.template='WNCCCNWNW'
        else:
            self.template = args.template

    def get_keyspace_size(self):
        n = 1
        for char in self.template:
            if char in TEMPLATE_METACHARS:
                n *= len(TEMPLATE_METACHARS[char])
        return n

    def generate_password(self):
        ret = ''
        for char in self.template:
            if char in TEMPLATE_METACHARS:
                ret += sys_random.choice(TEMPLATE_METACHARS[char])
            else:
                ret += char
        return ret

    def __str__(self):
        size = self.get_keyspace_size()

        # 94 is the number of possible characters with uppercase,
        # lowercase, punctuation, and digits
        return ('Password generator with '
            + (' ≅ '.join(("%d^%.1f" % (base, math.log(size) / math.log(base))
                for base in [10, 2, 94])))
            + ' possible passwords')

def main(args=None):
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('--word-list')
    parser.add_argument('template', nargs='?')
    args = parser.parse_args()

    p = PasswordGenerator(args)
    print(str(p) + ':')

    print(p.generate_password())

if __name__ == '__main__':
    main()
