#!/usr/bin/env python3

"""
Have many slightly different copies of a file, maybe from a bunch of backups,
and want to find just the unique versions? This is the script for you.
"""

import hashlib
import json
import os
import shutil
from argparse import ArgumentParser
from pathlib import Path

def hash_path_contents(path):
    h = hashlib.sha256()

    with path.open('rb') as f:
        while True:
            data = f.read(1 << 20)
            if len(data) > 0:
                h.update(data)
            else:
                break
        return h.hexdigest()

def dest_name(path, insertion):
    return path.with_stem(path.stem + '-' + insertion)

def copy_with_time(src, dest):
    shutil.copy(src, dest)
    stat = src.stat()
    os.utime(dest, times=(stat.st_atime, stat.st_mtime))

class Uniquer:
    def __init__(self, target):
        self.target = Path(target)

        self.seen = {}

    def scan_existing(self):
        cache_file = self.target / 'cache.json'
        cached_paths = set()
        info = []
        if cache_file.is_file():
            info = json.loads(cache_file.read_text())
            for [filename, mtime, filehash] in info:
                path = self.target / filename
                if path.stat().st_mtime == mtime:
                    self.seen[filehash] = path
                    cached_paths.add(str(path))

        for path in self.target.iterdir():
            if str(path) in cached_paths:
                continue

            filehash = hash_path_contents(path)
            mtime = path.stat().st_mtime
            info.append([path.name, mtime, filehash])
            cache_file.write_text(json.dumps(info, indent=2) + '\n')

            self.seen[filehash] = path

    def copy_if_new(self, path):
        contents_hash = hash_path_contents(path)
        if contents_hash not in self.seen:
            new_file = self.target / dest_name(path, contents_hash[:10]).name
            copy_with_time(path, new_file)
            print(new_file)
            self.seen[contents_hash] = new_file

def main():
    parser = ArgumentParser()
    parser.add_argument('--target', type=str, required=True)
    parser.add_argument('files', nargs='+')
    args = parser.parse_args()

    uniquer = Uniquer(target=args.target)
    uniquer.scan_existing()
    for f in args.files:
        print(f)
        uniquer.copy_if_new(Path(f))

if __name__ == '__main__':
    main()
