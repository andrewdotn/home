#!/usr/bin/env python3.7

import argparse
import dateutil.parser
import os
import subprocess

import requests

# https://stackoverflow.com/a/31347222/14558
def add_bool_arg(parser, name, default=False):
    dest = name.replace('-', '_')
    group = parser.add_mutually_exclusive_group(required=False)
    group.add_argument('--' + name, dest=dest, action='store_true')
    group.add_argument('--no-' + name, dest=dest, action='store_false')
    parser.set_defaults(**{dest:default})

parser = argparse.ArgumentParser()
parser.add_argument('--github-user-name')
add_bool_arg(parser, 'author-is-committer', default=True)
parser.add_argument('--date')
args, remainder = parser.parse_known_args()

env_update = {}

if args.github_user_name:
    with open(os.path.expanduser('~/.github_token'), 'r') as f:
        token = f.read().strip()
    user_info = requests.get(
        f'https://api.github.com/users/{args.github_user_name}',
        headers={'Authorization': f'token {token}'}).json()

    if user_info['name'] is not None:
        name = user_info['name']
    else:
        name = user_info['login']

    email = f"{user_info['id']}+{user_info['login']}@users.noreply.github.com"

    env_update['GIT_AUTHOR_NAME'] = name
    env_update['GIT_AUTHOR_EMAIL'] = email
    if args.author_is_committer:
        env_update['GIT_COMMITTER_NAME'] = name
        env_update['GIT_COMMITTER_EMAIL'] = email

if args.date:
    d = dateutil.parser.parse(args.date)

    if d.tzinfo is None:
        tz = '-0000'
    else:
        offset_seconds = round(d.tzinfo.utcoffset(d).total_seconds())
        sign = '+' if offset_seconds >= 0 else '-'
        minutes = (abs(offset_seconds) // 60) % 60
        hours = abs(offset_seconds) // 3600
        tz = f'{sign}{hours:02d}{minutes:02d}'

    env_update['GIT_AUTHOR_DATE'] = f'{int(d.timestamp())} {tz}'
    if args.author_is_committer:
        env_update['GIT_COMMITTER_DATE'] = env_update['GIT_AUTHOR_DATE']

args = ['git', 'commit'] + remainder
print(env_update)
print(args)

updated_env = os.environ.copy()
updated_env.update(env_update)

subprocess.check_call(args, env=updated_env)

revision = subprocess.check_output(['git', 'rev-parse', 'HEAD']).strip()
subprocess.check_call(['git', 'cat-file', '-p', revision])
subprocess.check_call(['git', '--no-pager', 'log', '-n1', revision])
