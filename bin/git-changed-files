#!/usr/bin/env node

const path = require("path");
const { inspect } = require("util");
const { spawn } = require("child_process");

async function runCommandAndCaptureOutput(command, options) {
  const proc = spawn(command[0], command.slice(1), {
    stdio: ["ignore", "pipe", "pipe"],
    ...options,
  });

  const output = { stdout: "", stderr: "" };

  proc.stdio[1].on("data", (data) => (output.stdout += data));
  proc.stdio[2].on("data", (data) => (output.stderr += data));

  const retCode = await new Promise((resolve) => proc.on("close", resolve));
  if (retCode !== 0) {
    throw new Error(
      `${inspect(command)} returned ${retCode}, out was ${inspect(
        output.stdout
      )}, err was ${inspect(output.stderr)}`
    );
  }
  return { retCode, ...output };
}

async function main() {
  const topDir = (
    await runCommandAndCaptureOutput(["git", "rev-parse", "--show-toplevel"])
  ).stdout.trim();

  const changedText = (
    await runCommandAndCaptureOutput(["git", "status", ".", "--porcelain"])
  ).stdout;
  for (const line of changedText.split("\n")) {
    const match = /^ ?[ADRM]+\s+(.*?)(?: -> (.*))?$/.exec(line);
    if (!match) {
        continue;
    }

    for (const m of [match[1], match[2]]) {
      if (m) {
        const filePath = path.join(topDir, m);
        console.log(path.relative("", filePath));
      }
    }
  }
}

if (require.main === module) {
  main().catch((e) => {
    console.error(e);
    process.exit(1);
  });
}
