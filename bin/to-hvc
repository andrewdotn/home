#!/usr/bin/env node

const child_process = require('child_process');
const crypto = require('crypto');
const path = require('path');
const { inspect } = require('util');
const { stat, unlink, utimes } = require('fs').promises;
const yargs = require('yargs');

async function exists(path) {
    try {
        await stat(path);
        return true;
    } catch (e) {
        if (e.code === 'ENOENT') {
            return false;
        }
        throw e;
    }
}

function run(cmd) {
    const proc = child_process.spawn(cmd[0], cmd.slice(1), {
        stdio: ['ignore', 'inherit', 'inherit']
    });

    return new Promise((resolve, reject) => {
        proc.on('error', e => reject(e));
        proc.on('exit', (code, signal) => {
            if (code !== 0) {
                let err = `Process ${inspect(cmd)} exited with `;
                if (code !== null) {
                    err += `code ${code}`;
                } else {
                    err += `signal ${signal}`;
                }
                reject(new Error(err));
            }
            resolve();
        });
    });
}

function tmpPrefix() {
    return crypto.randomBytes(5).toString('hex');
}

let interrupted = false;

process.on('SIGINT', () => {
    interrupted = true;
});

async function main() {
    const argv = yargs
        .strict()
        .demandCommand(0, 0)
        .command('$0 <file>')
        .option('remote-server', {default: 'pve1.neitsch.ca'})
        .option('ffmpeg-path', {default: 'ffmpeg-static/ffmpeg'})
        .option('output-file', {})
        .option('copy-metadata', {type: 'boolean'})
        .argv;

    const statPromise = stat(argv.file);

    const tmpInput = tmpPrefix() + path.extname(argv.file);
    const tmpOutput = tmpPrefix() + '.mp4';

    const fileWithoutExtension = argv.file.substring(0,
        argv.file.length - path.extname(argv.file).length);
    let outputFile;
    if (argv.outputFile !== undefined) {
        outputFile = argv.outputFile;
    } else {
        outputFile = path.extname(argv.file) === '.mp4' ?
            fileWithoutExtension + '-x265.mp4' :
            fileWithoutExtension + '.mp4';
    }

    if (await exists(outputFile)) {
        throw new Error(`output file ${inspect(outputFile)} exists`);
    }

    await run(['rsync', '-P', argv.file, `${argv.remoteServer}:${tmpInput}`]);
    try {
        await run(['ssh', argv.remoteServer, '--', argv.ffmpegPath,
            '-i', tmpInput,
            '-acodec', 'aac',
            '-vcodec', 'libx265',
            '-scodec', 'mov_text',
            '-pix_fmt', 'yuv420p',
            '-movflags', '+faststart',
            '-map_metadata', '-1',
            '-vtag', 'hvc1',
            tmpOutput]);
    } finally {
        await run(['ssh', argv.remoteServer, '--', 'rm', tmpInput]);
    }
    if (interrupted)
        process.exit(1);

    await run(['rsync', '-P', '--remove-source-files',
        `${argv.remoteServer}:${tmpOutput}`, outputFile]);
    if (argv.copyMetadata) {
        await run(['exiftool', '-extractEmbedded', '-tagsFromFile',
            argv.file, outputFile]);
        await unlink(`${outputFile}_original`);
    }
    await utimes(outputFile, new Date(), (await statPromise).mtime);
}

main().catch(e => {
    console.error(e);
    process.exit(1);
});
